@page "/boat-info/{Id:int}"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using BoatRental.Data

@inject UserManager<ApplicationUser> userManager
@inject IHttpContextAccessor _httpContextAccessor
@inject IBoatService BoatService
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>@(boat != null ? boat.Name : "Laddar...")</PageTitle>


<h1>Denna sida syns endast som inloggad</h1>

<AuthorizeView>
    <p>Hello @userFirstName!</p>
    <p>Här ska båt- och uthyrningsdetaljer finnas.</p>
    @if (boat != null)
    {
        <p>Testar så att page id-routing funkar: @boat.Name</p>
        <img src="/Images/@boat.ImageName" />
    }
    else
    {
        <p>Kunde inte ladda information om båt.</p>
    }

    @if (boat != null)
    {
        <div class="mt-3 booking-button">
            <NavLink href=@($"/book-boat/{boat.Id}")>Boka båt</NavLink>
        </div>
    }
</AuthorizeView>

@code {
    [Parameter]
    public int Id { get; set; }

    private Boat boat { get; set; }

    private string? userFirstName;

    protected override async Task OnInitializedAsync()
    {
        var user = await userManager.GetUserAsync(_httpContextAccessor.HttpContext.User); // Get user based on claims with HttpContextAccessor
        if (user != null)
        {
            userFirstName = user.FirstName;
        }

        boat = await BoatService.GetBoatById(Id);
        if (boat == null)
        {
            Console.WriteLine($"Ingen båt med Id {Id} hittades");
        }
    }
}
